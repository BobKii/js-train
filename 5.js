console.log("Завдання: 5 ==============================");

// Створюємо функцію task5, яка буде використовувати проміси.
function task5() {
  // Створюємо змінну counter яка буде лічильником та присвоюємо значення 0
  let counter = 0;
  let mySetInterval = null;
  // Створюємо проміс з іменем intervalPromise.
  let intervalPromise = new Promise((resolve, reject) => {
    mySetInterval = setInterval(
      () => resolve("Проміс 2 виконано"),
      1000,
      counter
    );
    counter++;
    console.log(`Значення лічильника: ${counter}`);
    if (counter === 5) {
      clearInterval(mySetInterval);
      console.log(`Значення лічильника: 5`);
    }
  });

  // Використовуємо функцію setInterval, щоб імітувати
  // асинхронну операцію яка повторюється кожну секунду
  // збільшуючи лічильник на 1
  // Виводимо в консоль `Значення лічильника: ${counter}`
  // Коли лічильник досягає 5, використовуємо clearInterval
  // та викликаємо resolve, який повертає значення лічильника.

  // Використовуємо .then метод для отримання значення, яке було
  // передане у функцію resolve() в нашому промісі, та виводимо його
  // в консоль.

  // Використовуємо .catch метод для обробки випадків,
  // коли проміс переходить в стан "rejected".
  // Та виводимо в консоль помилку.

  // Обробляємо помилку, якщо вона виникне
  // Ми використовуємо .finally метод для виконання дій незалежно від того, в якому стані завершився наш проміс, та виводимо повідомлення "Завершення лічильника"
  // Виконуємо код після завершення проміса
}
// Викликаємо функцію task5

console.log(`======             Завдання: 5              ====== `);
console.log(`======      ???    ===========     ???      ====== `);
console.log(`===                                            === `);
console.log(`=== Створюємо проміс з іменем intervalPromise. === `);
console.log(`===                                            === `);
console.log(`======     підкажіть, як це виглядає?       ====== `);
console.log(`======                                      ====== `);
task5();
