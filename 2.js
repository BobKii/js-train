console.log("Завдання: 2 ==============================");

// Створюємо функцію task2
function task2() {
  // Створюємо функцію promise1
  // Повертаємо новий проміс
  // Використовуємо setTimeout для імітації асинхронної операції,
  //яка завершується через 2 секунди.
  // Після 2 секунд викликаємо resolve з результатом проміса,
  // який є рядком "Проміс 1 виконано"
  function promise1() {
    let prom1 = new Promise((resolve, reject) => {
      setTimeout(() => resolve("Проміс 1 виконано"), 2000, "Проміс 1 виконано");
    });
    return prom1;
  }

  // Створюємо функцію promise2
  // Повертаємо новий проміс
  // Використовуємо setTimeout для імітації асинхронної операції,
  // яка завершується через 5 секунди.
  // Після 5 секунд викликаємо resolve з результатом проміса,
  // який є рядком "Проміс 2 виконано"
  function promise2() {
    let prom2 = new Promise((resolve, reject) => {
      setTimeout(() => resolve("Проміс 2 виконано"), 5000, "Проміс 2 виконано");
    });
    return prom2;
  }
  // Використовуємо Promise.race для визначення,
  // який проміс виконується першим.
  // Метод повертає новий проміс, який вирішується або відхиляється
  // негайно після розв'язання або відхилення будь-якого з промісів
  // у переданому списку.
  Promise.race([promise1(), promise2()])
    .then((value) => {
      console.log(value);
    })
    .finally(() => {
      console.log("Завдання 2 завершено");
    });
  // У разі успіху виводимо результат
  // У разі помилки виводимо повідомлення про помилку
  // Незалежно від результату, виводимо повідомлення про завершення
  // обробки промісів, який є рядом "Завдання 2 завершено"
}

// Викликаємо функцію task2
task2();
